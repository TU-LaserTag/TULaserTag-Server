{"remainingRequest":"/home/CS/users/danderso/.linux/SeniorProject/TULaserTag-Server/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/CS/users/danderso/.linux/SeniorProject/TULaserTag-Server/src/pages/LTC.vue?vue&type=template&id=71db2132&","dependencies":[{"path":"/home/CS/users/danderso/.linux/SeniorProject/TULaserTag-Server/src/pages/LTC.vue","mtime":1579200186000},{"path":"/home/CS/users/danderso/.linux/SeniorProject/TULaserTag-Server/node_modules/cache-loader/dist/cjs.js","mtime":1574194681000},{"path":"/home/CS/users/danderso/.linux/SeniorProject/TULaserTag-Server/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1579104607000},{"path":"/home/CS/users/danderso/.linux/SeniorProject/TULaserTag-Server/node_modules/vuetify-loader/lib/loader.js","mtime":1579099113000},{"path":"/home/CS/users/danderso/.linux/SeniorProject/TULaserTag-Server/node_modules/cache-loader/dist/cjs.js","mtime":1574194681000},{"path":"/home/CS/users/danderso/.linux/SeniorProject/TULaserTag-Server/node_modules/vue-loader/lib/index.js","mtime":1579104607000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}